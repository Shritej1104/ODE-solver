# -*- coding: utf-8 -*-
"""Inteactive ODE/PDE Solver+plotter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1olTnu7mCZ6OlTxShyu0DfQ3yGL1P7ZhZ
"""



"""python ode/pde solver

"""

!pip install sympy

import sympy as sp
import matplotlib.pyplot as plt

# define variables
x= sp.Symbol('x')
y= sp.Function('y')

#Defin ODE : dy/dx + y = e^x

ode = sp.Eq(sp.Derivative(y(x),x)+ y(x), sp.exp(x))

#solve ODE
solution = sp.dsolve(ode)
solution

"""## Plot the solution

We will assume constant C1 = 1 for visualization
"""

#Get solution with c1=1
c1= sp.symbols('C1')
sol_with_const = solution.subs(c1,1)

#convert Sympy solution to numpy function
f = sp.lambdify(x, sol_with_const.rhs, "numpy")

import numpy as np
X = np.linspace(0,5,100)
Y = f(X)

#plot
plt.plot(X,Y, label="y(s) solutions")
plt.xlabel("x")
plt.ylabel("y(x)")
plt.title("Solution of ODE : dy/dx+y=e^x")
plt.legend()
plt.grid()
plt.show()

"""This gives a graph of solutions

# Making it Interactive
"""

!pip install Sympy
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np

#defne variables
x = sp.Symbol('x')
y = sp.Function('y')
C1 = Sp.Symbol('C1') #integration constant

print ("Example input : sp.Deriative(y(x), x)+ y(x)-sp.exp(x) ")
#take input equation from user
expr = input("Enter your ODE i terms of y and x : ")

#Covert string into sympy expression
 ode = eval(expr)

 #solve ODE
 solution = sp.dsolve(sp.Eq(ode,0))
 print("General Solution:", solution)

 #Replace constant for plotting
 sol_with_const = solution.subs(C1, c1_value)

 #Covert to numpy function
 f= sp.lambdify(x, sol_with_const.rhs, "numpy")
 #plot
 #Get solution with c1=1
c1= sp.symbols('C1')
sol_with_const = solution.subs(c1,1)

#convert Sympy solution to numpy function
f = sp.lambdify(x, sol_with_const.rhs, "numpy")

import numpy as np
X = np.linspace(0,5,100)
Y = f(X)

#plot
plt.plot(X,Y, label="y(s) solutions")
plt.xlabel("x")
plt.ylabel("y(x)")
plt.title("Solution of ODE : dy/dx+y=e^x")
plt.legend()
plt.grid()
plt.show()

return solution

!pip install sympy
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np

# Define variables
x = sp.Symbol('x')
y = sp.Function('y')
C1 = sp.Symbol('C1')

print("ðŸ‘‰ Example input you can try:")
print("   sp.Derivative(y(x), x) + y(x) - sp.exp(x)")
print("   sp.Derivative(y(x), (x,2)) - y(x)")   # second order example

# Take input equation from user
expr = input("Enter your ODE in terms of y and x: ")

# Convert string into sympy expression
ode = eval(expr)

# Solve ODE
solution = sp.dsolve(sp.Eq(ode, 0))
print("General Solution:", solution)

# Substitute C1 = 1 for plotting
sol_with_const = solution.subs(C1, 1)

# Convert to numpy function
f = sp.lambdify(x, sol_with_const.rhs, "numpy")

# Plot
X = np.linspace(0, 5, 100)
Y = f(X)

plt.plot(X, Y, label="y(x) solution")
plt.xlabel("x")
plt.ylabel("y(x)")
plt.title("Solution of your ODE")
plt.legend()
plt.grid()
plt.show()
return solution

